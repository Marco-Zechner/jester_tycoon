//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""action map"",
            ""id"": ""41f03382-f764-4a28-a141-557ea0632f05"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""6d1606a4-9620-4ba5-8f83-a44177fa53f1"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Shift"",
                    ""type"": ""Button"",
                    ""id"": ""cff87034-08d6-48eb-8c5a-dd91e746f1c8"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Mouse"",
                    ""type"": ""PassThrough"",
                    ""id"": ""25cdaabb-f3c0-4213-8f68-ab8218306846"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Viewer"",
                    ""type"": ""Button"",
                    ""id"": ""dbe3f260-ae80-4fb3-bc35-64989cc19e18"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""f4a5e9cf-931a-4aea-a591-82e59b924c75"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""5cd418e0-c606-4610-b816-7f2481c9ded7"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""58fdeba8-b540-42c4-a867-57ae9fe15df9"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""d362cad0-2a57-4275-a966-dd8084ac5808"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""87049308-d4d8-416f-ae67-b0d71f65492a"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""2de3fed6-4e2b-4339-9ea3-29bf51749bba"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Shift"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""1763db87-2cce-4b35-953e-8c33eaddbcef"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""5363b034-5c74-406e-b839-f20bbcb04538"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Viewer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""selectPlaces"",
            ""id"": ""98232e73-eddb-4c46-a396-0efd16738a5d"",
            ""actions"": [
                {
                    ""name"": ""SelectPosition"",
                    ""type"": ""Value"",
                    ""id"": ""c2e8ccfe-4a01-43d4-81a4-67b8fd8a9e49"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""SelectCenter"",
                    ""type"": ""Button"",
                    ""id"": ""d74741d8-cbdb-4c5c-8d77-4762e562b354"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""One Modifier"",
                    ""id"": ""b0ff368a-cb5c-4508-a62e-f5db99be3886"",
                    ""path"": ""OneModifier"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectPosition"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""modifier"",
                    ""id"": ""59ce8da5-f108-44b3-af2e-a4bda4d6d5b2"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""binding"",
                    ""id"": ""28306fd6-7f98-4419-8357-c27120da4a55"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectPosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""b3faf92f-f877-497d-b48c-ee816137ca0e"",
                    ""path"": ""<Gamepad>/rightTrigger"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SelectCenter"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // action map
        m_actionmap = asset.FindActionMap("action map", throwIfNotFound: true);
        m_actionmap_Move = m_actionmap.FindAction("Move", throwIfNotFound: true);
        m_actionmap_Shift = m_actionmap.FindAction("Shift", throwIfNotFound: true);
        m_actionmap_Mouse = m_actionmap.FindAction("Mouse", throwIfNotFound: true);
        m_actionmap_Viewer = m_actionmap.FindAction("Viewer", throwIfNotFound: true);
        // selectPlaces
        m_selectPlaces = asset.FindActionMap("selectPlaces", throwIfNotFound: true);
        m_selectPlaces_SelectPosition = m_selectPlaces.FindAction("SelectPosition", throwIfNotFound: true);
        m_selectPlaces_SelectCenter = m_selectPlaces.FindAction("SelectCenter", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // action map
    private readonly InputActionMap m_actionmap;
    private List<IActionmapActions> m_ActionmapActionsCallbackInterfaces = new List<IActionmapActions>();
    private readonly InputAction m_actionmap_Move;
    private readonly InputAction m_actionmap_Shift;
    private readonly InputAction m_actionmap_Mouse;
    private readonly InputAction m_actionmap_Viewer;
    public struct ActionmapActions
    {
        private @Controls m_Wrapper;
        public ActionmapActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_actionmap_Move;
        public InputAction @Shift => m_Wrapper.m_actionmap_Shift;
        public InputAction @Mouse => m_Wrapper.m_actionmap_Mouse;
        public InputAction @Viewer => m_Wrapper.m_actionmap_Viewer;
        public InputActionMap Get() { return m_Wrapper.m_actionmap; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ActionmapActions set) { return set.Get(); }
        public void AddCallbacks(IActionmapActions instance)
        {
            if (instance == null || m_Wrapper.m_ActionmapActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_ActionmapActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Shift.started += instance.OnShift;
            @Shift.performed += instance.OnShift;
            @Shift.canceled += instance.OnShift;
            @Mouse.started += instance.OnMouse;
            @Mouse.performed += instance.OnMouse;
            @Mouse.canceled += instance.OnMouse;
            @Viewer.started += instance.OnViewer;
            @Viewer.performed += instance.OnViewer;
            @Viewer.canceled += instance.OnViewer;
        }

        private void UnregisterCallbacks(IActionmapActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Shift.started -= instance.OnShift;
            @Shift.performed -= instance.OnShift;
            @Shift.canceled -= instance.OnShift;
            @Mouse.started -= instance.OnMouse;
            @Mouse.performed -= instance.OnMouse;
            @Mouse.canceled -= instance.OnMouse;
            @Viewer.started -= instance.OnViewer;
            @Viewer.performed -= instance.OnViewer;
            @Viewer.canceled -= instance.OnViewer;
        }

        public void RemoveCallbacks(IActionmapActions instance)
        {
            if (m_Wrapper.m_ActionmapActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IActionmapActions instance)
        {
            foreach (var item in m_Wrapper.m_ActionmapActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_ActionmapActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public ActionmapActions @actionmap => new ActionmapActions(this);

    // selectPlaces
    private readonly InputActionMap m_selectPlaces;
    private List<ISelectPlacesActions> m_SelectPlacesActionsCallbackInterfaces = new List<ISelectPlacesActions>();
    private readonly InputAction m_selectPlaces_SelectPosition;
    private readonly InputAction m_selectPlaces_SelectCenter;
    public struct SelectPlacesActions
    {
        private @Controls m_Wrapper;
        public SelectPlacesActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @SelectPosition => m_Wrapper.m_selectPlaces_SelectPosition;
        public InputAction @SelectCenter => m_Wrapper.m_selectPlaces_SelectCenter;
        public InputActionMap Get() { return m_Wrapper.m_selectPlaces; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(SelectPlacesActions set) { return set.Get(); }
        public void AddCallbacks(ISelectPlacesActions instance)
        {
            if (instance == null || m_Wrapper.m_SelectPlacesActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_SelectPlacesActionsCallbackInterfaces.Add(instance);
            @SelectPosition.started += instance.OnSelectPosition;
            @SelectPosition.performed += instance.OnSelectPosition;
            @SelectPosition.canceled += instance.OnSelectPosition;
            @SelectCenter.started += instance.OnSelectCenter;
            @SelectCenter.performed += instance.OnSelectCenter;
            @SelectCenter.canceled += instance.OnSelectCenter;
        }

        private void UnregisterCallbacks(ISelectPlacesActions instance)
        {
            @SelectPosition.started -= instance.OnSelectPosition;
            @SelectPosition.performed -= instance.OnSelectPosition;
            @SelectPosition.canceled -= instance.OnSelectPosition;
            @SelectCenter.started -= instance.OnSelectCenter;
            @SelectCenter.performed -= instance.OnSelectCenter;
            @SelectCenter.canceled -= instance.OnSelectCenter;
        }

        public void RemoveCallbacks(ISelectPlacesActions instance)
        {
            if (m_Wrapper.m_SelectPlacesActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ISelectPlacesActions instance)
        {
            foreach (var item in m_Wrapper.m_SelectPlacesActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_SelectPlacesActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public SelectPlacesActions @selectPlaces => new SelectPlacesActions(this);
    public interface IActionmapActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnShift(InputAction.CallbackContext context);
        void OnMouse(InputAction.CallbackContext context);
        void OnViewer(InputAction.CallbackContext context);
    }
    public interface ISelectPlacesActions
    {
        void OnSelectPosition(InputAction.CallbackContext context);
        void OnSelectCenter(InputAction.CallbackContext context);
    }
}
